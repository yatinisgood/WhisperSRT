 Is prompt engineering really going to take over software engineering? Well, for one thing, the president and co-founder of NVIDIA says this is going to happen. Okay, let me explain. Jensen Huang, who is the president and co-founder of NVIDIA, recently went on to the World Government Summit in Dubai and here's what he said. He said that his statement that he was about to share is what most tech influential people have said over the last 10 or 15 years, which is that everyone, especially kids, should learn how to code. So here's what he said though. He goes on to say, it is our job to create computing technology that nobody has to program and that the programming language is human. Then he goes on to say, everyone in the world is now a programmer. This is the miracle of AI. All right, before we dive into this topic further and really break down, is software engineering getting replaced by prompt engineering? Make sure to hit the subscribe button for more tech, future tech, career, all the above topics and leave in the comments any other questions or topics you want me to cover. All right, now let's get into it. This is a really bold statement to make. And I think a lot of people, if you are someone who is learning to code or just getting into tech, it will feel very discouraging because of this statement. I mean, I know for myself, when I was learning how to code, I was doing so during the boom of coding, if you will, meaning it was just endless opportunities and possibilities with this skill. And it was one of the hardest things I had to learn, but it was so rewarding. Now to see that this skill is something that might not be learned or as valuable, or people don't tout as people don't look up as this really great skill. It really brings a lot of different emotions my way. Now I'm going to keep my emotions out of this video and really dive into the facts. So if you are someone who is learning how to code, getting into tech, or maybe you are an engineer, this video is for you. Now let's start off with the obvious. Jensen is not the first individual, especially of a high caliber to be sharing these statements. But for some reason, this time it felt different. I've heard a lot of these statements of how AI is going to take over programming, and I never really paid much attention to it. But this statement from him, I think it's because it feels so different because we are at a time where we can see that this could become a reality. Now here's the thing. I don't want this video to dissuade anyone or discourage anyone from learning to code. There is going to be some really great opportunities for you still, if you are in that boat. But what I think is a bigger question here, and what we really should look at rather than should you learn how to code anymore, or should you not learn how to code anymore, is what this bigger picture here. Let's take a step back. I was going to take a step back literally, but the chair is in the way. And really say, see, what exactly does this mean? Well, for one thing, it means we are coming into a period of time that's never been done in history before where technology is advancing quicker than we can keep up with it. We are not able to keep up on a daily basis with the tech advancements anymore as humans. So yes, that can sound a little bit scary on one hand, but on the other hand, what it really is showing is you need to not be comfortable in your role, in your current skill sets, but being open to continue to evolve. All right, Tiff, can you just cut to the chase? Is prompt engineering going to replace software engineers? No, it's not, at least not for the foreseeable future, but things are going to change drastically. And I mean, we already see this with how much now we are using AI in our daily lives when coding. Think of tools like Copilot or different, even ChatGPT when you are coding, you are now able to go into these artificial intelligent chatbots and ask for help, get suggestions at a quicker rate than you would have if you were a software engineer. So, if you are a software engineer, you are going to be able to do this much faster than ever before. Let's start though by breaking down what exactly is a prompt engineer. At its core, prompt engineering focuses on creating and designing prompts that are given to AI models. I mean, we always talk about ChatGPT to really instruct them to have the desired outputs. So, why is this role important? I think at first it was really laughed at as, oh, this role is going to come and go, but the more we grow with AI, the more we can realize that this role is here to stay and becoming more and more important. What sets prompt engineers apart? Well, a lot of prompt engineers have a very strong background in machine learning or artificial intelligence. They are aware of how these models operate, how it will affect them, what they input into these models based on what they output and get, and they're very knowledgeable in that area. Now, that's not saying you have to have knowledge around machine learning or AI to become a prompt engineer, but at some level you do need to start diving into it. The other thing about prompt engineers is depending on what company they are working for, they usually are specialists within that industry. So, for example, prompt engineering is something that is widely used within the health industry. And if you are a prompt engineer working in health and trying to diagnose someone or have some understanding as to what ailments they have, you need to also have an understanding as to the health side of this industry. You can't just be this technical person. Okay, so here is the role of a prompt engineer broken down pretty simply for you. So, one, you have to design effective prompts. Two, refine and optimize, so continuously test and refine your prompts to ensure you're getting the best output. Number three is customize your prompts to fit particular projects or industries. This is kind of what we spoke to a little bit earlier, that you need to be, to some degree, an expert in that field. And number four is monitor outputs. So, ensure that the outputs are what is expected, that the AI model isn't hallucinating, and there isn't anything else weird going on there. All right, so let's take a look at how artificial intelligence has already impacted software engineering. Well, for one thing, we mentioned earlier, now we have code assistants. So, we have things such as Copilot, who will now write out tire intelligence. So, we have things such as Copilot, who will now write out tire intelligence. So, we have things such as Copilot, who will now write out entire functions, entire files for you or with you. The next is debugging and code review. Now, we have tools that can help you debug and also review your code, which is super helpful if you are someone who is working on a team. Next up, we have tools to automate documentation. I mean, documentation is probably one of the worst parts of software engineering, in my opinion, anyways. Who wants to deal with documentation? But having AI to help write documentation for you based on your code is a game changer. One of the tools I actually used, quite a while ago and love, not sponsored, just shouting them out, is Swim. So, Swim will actually help generate documentation based on your files in your GitHub, which is, it's really cool. Anyway, so that's already exists too. Next is ideation and problem solving. So, providing new approaches or algorithms for solving complex problems. I mean, what is left for programmers? We just went through everything that AI can do. The reality is, even if prompt engineering takes over software engineering, which, let's do a side note here, doesn't mean software engineering doesn't exist. We're not having that conversation. Of course, it's going to exist. Say prompt engineering does grow and become more in demand than a role like software engineers. The reality is, A, if you are a software engineer growing into a prompt engineering role, or even staying in your software engineering role, it will just start looking different over time. We are in the weeds with this. We're not going to see this happen directly overnight. Although it does feel like it's happening very quickly. It's more so being able to use these AI tools, implement AI tools, and use them to solve complex problems. So, implement it into your workflow, and you are going to be fine. Going back to what the president and co-founder of Nvidia said, he also goes on to say that it's important for people to learn how to use generative AI. So, it will be vital that we upskill everyone. And the upskilling process, I will be delightful and surprising. He's very optimistic. But to his point, it is going to be more and more vital that we continue to get more comfortable with these generative AI tools versus saying, we are too good for them. We're not going to use them. The reality is they are here and they're here to stay. Okay. So, to the chase, is prompt engineering going to overtake software engineering? There will always be a place for software engineers and there will always be a place for prompt engineers. But I do see that these two roles will merge closer and closer together. I mean, prompt engineering will merge with many different roles. And I do believe software engineering is one of them. All right. I'm curious to hear, do you agree with my thoughts? Do you disagree? I try and stay pretty neutral on this because the reality is we don't know what we don't know. And the most important takeaway is being open to continuous learning and not... freaking out like that meme where the dog is standing with a cup and everything's blowing up around him. All right. Thank you all for watching and make sure to hit that subscribe button for more tech, future tech, news, all of the above. And I'll see you soon. Thanks everyone.