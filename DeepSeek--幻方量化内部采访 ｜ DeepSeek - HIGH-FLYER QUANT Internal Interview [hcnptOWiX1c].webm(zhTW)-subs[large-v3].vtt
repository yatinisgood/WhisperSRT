WEBVTT

00:00.000 --> 00:02.460
假如你有1萬張A100顯卡

00:02.460 --> 00:05.000
你將如何去管理使用它們呢

00:05.000 --> 00:07.640
我是換方的AI應用工程師

00:07.640 --> 00:10.100
剛剛的問題就是我的工作日常

00:10.100 --> 00:12.440
這並不是什麼算力反爾賽

00:12.440 --> 00:17.580
雖然社交網站上把上千卡跑一次的大模型調侃為豪門

00:17.580 --> 00:19.480
但從我的角度來看

00:19.480 --> 00:22.760
要讓這個算力巨獸發揮出它真正的戰力

00:22.760 --> 00:24.920
除了興奮更多的是挑戰

00:24.920 --> 00:29.180
它不僅僅是把千卡甚至萬卡堆積起來使用

00:29.180 --> 00:31.120
這隻能說只是個開始

00:31.120 --> 00:34.540
而我們團隊所需要構建的是雙倍

00:34.540 --> 00:38.260
甚至於三倍於傳統集群使用率的AI基礎設施

00:38.260 --> 00:43.340
讓一行代碼就可以輕鬆調用的AI訓練服務

00:43.340 --> 00:45.940
想做成這樣的事情非常的不容易

00:45.940 --> 00:48.680
我們也沒有前任的經驗可以參考

00:48.680 --> 00:51.520
從集群節點拓撲結構的設計

00:51.520 --> 00:54.300
到PyTouch深度學習框架的改良

00:54.300 --> 00:57.780
存儲 網絡 通訊 算子優化等等

00:57.780 --> 00:58.880
都需要我們自己

00:58.880 --> 00:59.760
紮根進去

00:59.760 --> 01:02.440
基於硬件的特性不斷的去試錯

01:02.440 --> 01:06.700
在內外用戶的使用反饋當中去進行迭代和升級

01:06.700 --> 01:10.560
比如我入職後不久就碰到的集群升級之後

01:10.560 --> 01:12.580
模型訓練突然就降速的問題

01:12.580 --> 01:15.640
這些任務讀取數據非常的緩慢

01:15.640 --> 01:17.700
Checkpoint也沒有保存成功

01:17.700 --> 01:19.880
在debug的過程當中

01:19.880 --> 01:22.820
網上也沒有任何的資料能給我們作為參考

01:22.820 --> 01:26.780
我們從軟件層的一個個的斷點去排查

01:26.780 --> 01:28.560
到硬件設備的插拔輪換

01:28.880 --> 01:30.800
前後幾輪覆盤之後

01:30.800 --> 01:32.000
最終才定位到

01:32.000 --> 01:33.680
原來這個問題的元兇

01:33.680 --> 01:37.760
是大小兩個網絡交換機協議衝突的一個問題

01:37.760 --> 01:42.360
而最終我們的解決方案也被英偉達官方所收錄

01:42.360 --> 01:45.560
作為案例提供給了其他的開發者

01:45.560 --> 01:47.480
也就在那個時候開始

01:47.480 --> 01:48.760
讓我突然覺得

01:48.760 --> 01:52.880
原來我們已經是一個站在了全球技術前沿的團隊了

01:52.880 --> 01:54.560
現在呢

01:54.560 --> 01:56.840
每天有上千個AI大模型

01:56.840 --> 01:58.760
在換方營火平臺上進行訓練

01:58.880 --> 02:00.760
服務著金融量化

02:00.760 --> 02:01.640
NLP

02:01.640 --> 02:03.280
生物分子結構預測

02:03.280 --> 02:05.720
自動駕駛等諸多前沿場景

02:05.720 --> 02:08.800
每當看到模型的訓練快速的完成

02:08.800 --> 02:10.640
並且跑出經驗的效果

02:10.640 --> 02:14.200
都會讓我覺得大家所做的事情非常的有價值

02:14.200 --> 02:16.840
有一種AI時代的使命感

02:16.840 --> 02:19.120
身處在這個團隊

02:19.120 --> 02:20.800
給我的感覺就是快樂

02:20.800 --> 02:23.500
很幸運能夠和天才們一起共事

02:23.500 --> 02:25.020
我們提出一個問題

02:25.020 --> 02:26.720
能獲得無數的迴響

02:26.720 --> 02:28.640
而不是身邊只有沒有想法

02:28.640 --> 02:28.860
小說一句

02:28.880 --> 02:30.760
一隻小土豆瞪著無辜的大眼睛

02:30.760 --> 02:31.740
問你該怎麼辦

02:31.740 --> 02:34.320
空留你一個人在荒野裡面呼號

02:34.320 --> 02:38.120
前陣子我們在討論一個核心算子的時候

02:38.120 --> 02:40.460
某提到這個算子

02:40.460 --> 02:42.600
它GPU使用率不是很高

02:42.600 --> 02:44.680
有沒有更多提升空間了

02:44.680 --> 02:47.480
當時我是持懷疑態度的

02:47.480 --> 02:49.540
畢竟這是官方提供的算子

02:49.540 --> 02:51.500
是當時最快的實現

02:51.500 --> 02:54.960
他們有最硬件架構最深刻的理解

02:54.960 --> 02:58.160
但最終的結果也只有這樣

02:58.160 --> 02:58.640
那我們來看看

02:58.640 --> 03:01.280
那我們還能做些什麼呢

03:01.280 --> 03:02.840
但我們並沒有放棄

03:02.840 --> 03:05.680
畢竟人生苦短何妨一試

03:05.680 --> 03:07.600
和我們的同學一起苦悶掙扎

03:07.600 --> 03:09.880
山重水負了一個月之後

03:09.880 --> 03:11.920
那天我在回家路上

03:11.920 --> 03:14.520
看上去依舊是毫無收穫的一天

03:14.520 --> 03:16.200
他電話給我說

03:16.200 --> 03:16.520
哎呀

03:16.520 --> 03:19.160
他說他走在路上一陣涼風襲來

03:19.160 --> 03:21.880
他突然之間領悟了

03:21.880 --> 03:24.560
而現在版本在最弱的情況下

03:24.560 --> 03:26.440
比官方快了五倍

03:26.440 --> 03:28.400
普遍情況下快了25%

03:28.400 --> 03:31.720
直接幫我們節省了25%的GPU時間

03:31.720 --> 03:34.540
這就是我們做事的方式

03:34.540 --> 03:37.160
我們的追求並不僅僅在

03:37.160 --> 03:39.080
我比過去快了多少

03:39.080 --> 03:41.640
我比之前的代碼快了25%

03:41.640 --> 03:45.960
我們追求的是我達到理論的最大值

03:45.960 --> 03:47.420
是百分之多少

03:47.420 --> 03:49.200
比如我們的存儲指標

03:49.200 --> 03:51.440
是用了IB帶寬的百分之多少

03:51.440 --> 03:54.420
從80%到85%

03:54.420 --> 03:57.040
到91% 92% 93%

03:57.040 --> 03:58.380
這一步步跑了很多年

03:58.400 --> 04:00.360
這種人會下滑上來

04:00.360 --> 04:04.200
而這種1% 1%的極限追求和突破

04:04.200 --> 04:07.300
在此之前都是不敢想象的

04:07.300 --> 04:10.040
程序員其實並不害怕困難

04:10.040 --> 04:12.480
我寧可為了1%的性能突破

04:12.480 --> 04:13.880
但經節律一個月

04:13.880 --> 04:15.480
也不要面向谷歌編程

04:15.480 --> 04:17.240
寫一些沒有挑戰的代碼

04:17.240 --> 04:18.280
雖然很難

04:18.280 --> 04:19.740
但我並不會感到累

04:19.740 --> 04:22.320
反而後者這些枯燥的編程

04:22.320 --> 04:24.640
會消磨一個人的天賦

04:24.640 --> 04:27.080
我們已經站在非常前沿的位置

04:27.080 --> 04:28.400
遇到的都是各種全新的問題

04:28.400 --> 04:31.000
而和科研天才們一起死磕一個問題

04:31.000 --> 04:33.020
帶來激情是難以想象的

04:33.020 --> 04:36.060
而最終功課難題所帶來的成就感

04:36.060 --> 04:39.780
就是我作為程序員所能得到的最大快樂

04:39.780 --> 04:43.480
作為一個優秀的軟件工程師

04:43.480 --> 04:45.920
你理想的工作是什麼樣子的呢

04:45.920 --> 04:49.480
你又有沒有想過你那一身出色的技能

04:49.480 --> 04:52.180
到底能夠創造出什麼樣的價值呢

04:52.180 --> 04:54.400
我們思考過這個問題

04:54.400 --> 04:57.040
發現答案大概就是成就感

04:57.040 --> 04:59.560
這種成就感來自於工程落地

04:59.560 --> 05:01.200
創造的巨大商業價值

05:01.200 --> 05:02.380
往大了說

05:02.380 --> 05:05.100
它來自於站在世界技術的前沿

05:05.100 --> 05:07.700
引領了方向製造標準

05:07.700 --> 05:08.540
舉例而言

05:08.540 --> 05:11.120
我們用來為迪奧訓練讀取樣本的

05:11.120 --> 05:12.760
變形文件系統非常的快

05:12.760 --> 05:15.020
它快到一個什麼地步呢

05:15.020 --> 05:17.940
我們根本就不需要用緩存

05:17.940 --> 05:19.820
來幫助我們提升讀取的速度

05:19.820 --> 05:22.880
從服務端的磁盤到應用的buffer

05:22.880 --> 05:24.380
沒有一次內存拷貝

05:24.380 --> 05:26.300
從硬盤到內存

05:26.300 --> 05:27.780
內存到網卡

05:27.780 --> 05:30.040
然後就直接從客戶端的網卡

05:30.040 --> 05:31.320
來到了應用的buffer裡

05:31.320 --> 05:33.640
我們針對讀取的每一步

05:33.640 --> 05:35.340
都做了分析和優化

05:35.340 --> 05:37.060
幹掉了所有的內存拷貝

05:37.060 --> 05:38.820
也就得到了極致的性能

05:38.820 --> 05:42.440
我們還有先進的任務級分時調度系統

05:42.440 --> 05:44.040
超高性能的AI算子

05:44.040 --> 05:45.800
以及能夠將迪奧訓練延伸到

05:45.800 --> 05:48.060
多臺機器上併發執行的通訊框架

05:48.060 --> 05:50.440
這一切都是由一個年輕的

05:50.440 --> 05:52.680
充滿活力的螢火工程師團隊

05:52.680 --> 05:56.100
在短短几年的應用實戰中打造出來的

05:56.100 --> 05:58.660
而接下來軟件的極致提升

05:58.660 --> 06:00.540
硬件性能的進一步壓榨

06:00.540 --> 06:03.120
更多無人踏足過的技術難題

06:03.120 --> 06:04.740
將帶給我們更多的挑戰

06:04.740 --> 06:08.060
而螢火團隊會依然帶著驕傲一起分發

06:08.060 --> 06:10.280
身處這樣一個團隊當中

06:10.280 --> 06:12.300
會是一種理想的工作狀態

06:12.300 --> 06:14.340
由成就感驅動了我們

06:14.340 --> 06:16.540
創造了想象不到的價值

06:16.540 --> 06:18.820
2016年

06:18.820 --> 06:21.300
在AlphaGo擊敗李適時後不久

06:21.300 --> 06:23.860
我們上線了第一個深度學習的模型

06:23.860 --> 06:25.840
最初的模型只是一個

06:25.840 --> 06:26.760
MLP網絡

06:26.760 --> 06:28.120
模型很簡單

06:28.120 --> 06:30.300
但有著讓人驚歎的建模能力

06:30.300 --> 06:31.900
從那以後

06:31.900 --> 06:34.960
我們一直在深度學習方面進行持續投入

06:34.960 --> 06:38.800
現在序列模型不僅可以利用當下的信息

06:38.800 --> 06:40.820
還能靈活地使用過去幾分鐘

06:40.820 --> 06:43.800
幾天甚至幾個月發生的事件

06:43.800 --> 06:45.040
自然源處理

06:45.040 --> 06:47.140
讓模型學會理解新聞

06:47.140 --> 06:51.220
快人一步對信息做出反應

06:51.220 --> 06:53.740
圖神經網絡可以整合產業鏈數據

06:53.740 --> 06:55.700
發掘公司之間的關係

06:55.840 --> 06:58.600
同時對整個市場進行建模

06:58.600 --> 07:00.440
利用強化學習

07:00.440 --> 07:04.600
交易的細節可以隨著市場的變化自主地改進

07:04.600 --> 07:06.360
通過對抗訓練

07:06.360 --> 07:09.320
模型可以抑制自己的過度自信

07:09.320 --> 07:11.720
避免落入歷史的陷阱

07:11.720 --> 07:14.720
我們幾乎涉及了深度學習的所有領域

07:14.720 --> 07:18.440
並且時刻保持對前沿發展方向的密切關注

07:18.440 --> 07:22.240
想盡一切辦法來提升預測能力

07:22.240 --> 07:24.960
藉助AI的力量

07:24.960 --> 07:25.760
我們能夠

07:25.760 --> 07:27.840
更加精準地理解市場

07:27.840 --> 07:30.160
讓資產價格能夠更加迅速

07:30.160 --> 07:33.320
更加完整地反映現實世界的規律

07:33.320 --> 07:36.040
我們希望AI為我們帶來的收益

07:36.040 --> 07:40.680
可以反過來推動技術科學研究的進一步發展

07:40.680 --> 07:44.560
我們贊助和推動的科研和量化交易無關

07:44.560 --> 07:46.000
而是無人駕駛

07:46.000 --> 07:48.360
生物製藥等方向

07:48.360 --> 07:50.440
截止到2022年第一季度

07:50.440 --> 07:55.680
螢火AI超算已經服務了50多個國內外的高效實驗室

07:55.760 --> 07:57.200
以及科研機構

07:57.200 --> 08:01.600
累計提供了超過270萬小時的GPU算力

08:01.600 --> 08:04.840
在協助科研機構使用螢火超算的同時

08:04.840 --> 08:07.880
我們也在著手建立自己的科研團隊

08:07.880 --> 08:11.040
讓頂尖的頭腦可以藉助AI的力量

08:11.040 --> 08:14.160
進一步拓展科學的邊界

08:14.160 --> 08:16.720
從圖像分類到機器翻譯

08:16.720 --> 08:19.600
從圍棋佈局到蛋白結構

08:19.600 --> 08:22.320
AI在一個個領域攻城掠地

08:22.320 --> 08:25.360
但是對於AI是否能夠用於資產定價

08:25.360 --> 08:30.040
並且進行交易盈利的問題卻一直存在巨大的爭議

08:30.040 --> 08:31.520
在金融市場中

08:31.520 --> 08:34.040
大家盈利的方式可謂八仙過海

08:34.040 --> 08:35.440
各顯神通

08:35.440 --> 08:36.800
有宏觀分析

08:36.800 --> 08:38.520
股票的基本面分析

08:38.520 --> 08:41.040
還有行為金融學等等

08:41.040 --> 08:45.360
所有的參與者隨著市場變化而不斷挑戰過去的自己

08:45.360 --> 08:47.040
挑戰現在的對手

08:47.040 --> 08:48.880
挑戰未知的前路

08:48.880 --> 08:51.320
與學術界常見的圍棋

08:51.320 --> 08:52.200
遊戲

08:52.200 --> 08:53.120
CV

08:53.120 --> 08:55.240
NLP等任務相比

08:55.240 --> 08:58.200
股價預測是一個參與玩家眾多

08:58.200 --> 08:59.600
信息不完整

08:59.600 --> 09:01.160
信照比極低

09:01.160 --> 09:05.600
數據分佈不斷變化的時序預測問題加博弈問題

09:05.600 --> 09:08.040
複雜程度高一個量級以上

09:08.040 --> 09:09.200
正因為如此

09:09.200 --> 09:10.120
它很有趣

09:10.120 --> 09:11.760
並且充滿挑戰

09:11.760 --> 09:15.560
像一個超大的一字出續集的開放式遊戲

09:15.560 --> 09:17.520
你可以使用任何道具

09:17.520 --> 09:20.200
可以充值買顯卡算力裝備

09:20.200 --> 09:22.520
可以不斷壯大自己的隊伍

09:22.520 --> 09:23.560
在遊戲中

09:23.560 --> 09:25.120
你會遇到新的對手

09:25.240 --> 09:27.080
會遇到策略失效

09:27.080 --> 09:29.600
也會因為新的進展而興奮

09:29.600 --> 09:32.400
同時收穫金錢和成就感

09:32.400 --> 09:34.560
不能把研究結果公諸於眾

09:34.560 --> 09:36.560
或許是唯一的遺憾

09:36.560 --> 09:39.720
因為眾所周知的策略必將失效

09:39.720 --> 09:44.000
而這正是很多人說AI無法預測股價的原因

09:44.000 --> 09:46.400
從數據處理到模型調優

09:46.400 --> 09:48.640
每一個坑都需要踩過來

09:48.640 --> 09:52.880
在這條漫長曲折的道路上披荊斬棘前行時

09:52.880 --> 09:54.040
時間和市場

09:55.240 --> 09:57.320
最為豐厚的回報

09:57.320 --> 10:00.880
官方有一個非常扁平而靈活的團隊架構

10:00.880 --> 10:03.440
我們鼓勵內部不同小組的成員之間

10:03.440 --> 10:05.240
自由交流和合作

10:05.240 --> 10:08.040
去最大化我們整體的創新能力

10:08.040 --> 10:10.160
我們內部的氛圍比較寬鬆

10:10.160 --> 10:13.480
不採用KPI OKR等考試方式

10:13.480 --> 10:18.720
也因此我們歡迎那些有比較強的自我驅動力的人加入

10:18.720 --> 10:19.560
在這裡

10:19.560 --> 10:22.560
每個人可以根據自己的能力和興趣

10:22.560 --> 10:25.120
選擇自己研究的方向

10:25.240 --> 10:26.920
即使是剛畢業的新人

10:26.920 --> 10:30.480
也有機會去主導去探索一個全新的領域

10:30.480 --> 10:36.080
並且團隊中其他人會給他提供足夠的研究資源上的支持

10:36.080 --> 10:39.360
我們團隊中有一位去年剛畢業的本科生

10:39.360 --> 10:41.760
基於自己獨特的研究經歷

10:41.760 --> 10:47.160
提出了一種全新的從另類數據裡面提取信息的方法

10:47.160 --> 10:49.520
三個月之後在他剛轉正的時候

10:49.520 --> 10:54.160
策略就上線了取得了很好的效果

10:54.160 --> 10:55.080
在換方

10:55.080 --> 10:57.880
我們非常鼓勵這種創新和嘗試

10:57.880 --> 11:01.680
鼓勵團隊成員之間的互相幫助

11:01.680 --> 11:03.560
三人行必有我師

11:03.560 --> 11:05.600
在換方更是如此

11:05.600 --> 11:08.960
每一位成員都有自己的特長

11:08.960 --> 11:10.840
有些人擅長寫代碼

11:10.840 --> 11:13.720
會幫助同事優化執行效率

11:13.720 --> 11:15.880
有些人樹立能力特別強

11:15.880 --> 11:17.840
會熱衷於幫別人推公式

11:17.840 --> 11:20.240
寫算法做分析

11:20.240 --> 11:23.560
有的人對股票市場理解非常深刻

11:23.560 --> 11:24.680
會主動的

11:25.080 --> 11:27.480
和其他人進行分享

11:27.480 --> 11:29.800
我們有一套合理的評估方式

11:29.800 --> 11:32.360
選擇使用哪些模型交易

11:32.360 --> 11:34.480
確定模型的權重

11:34.480 --> 11:36.240
我們也有同樣完善的方式

11:36.240 --> 11:38.840
去評估每一位成員的貢獻

11:38.840 --> 11:42.080
大家的貢獻不僅僅來自於信號是否盈利

11:42.080 --> 11:45.720
也不僅僅來自於優化組合減少風險

11:45.720 --> 11:47.360
我們同時還會考慮

11:47.360 --> 11:49.760
對周圍成員的輸出貢獻

11:49.760 --> 11:53.400
以及是否持續努力和創新

11:53.400 --> 11:54.880
大家一起齊心協力

11:54.880 --> 11:56.560
出最優秀的模型

11:56.560 --> 11:59.200
和市場上最出名的人一起競爭

11:59.200 --> 12:01.400
是這個工作最吸引人的地方

